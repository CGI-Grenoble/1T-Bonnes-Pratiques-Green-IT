create table card
(
    id           bigint       not null
        primary key,
    title        varchar(255) not null,
    description  varchar(1000),
    difficulty   integer,
    actor        varchar(255),
    cpu_gain     boolean,
    link         varchar(255),
    memory_gain  boolean,
    network_gain boolean,
    storage_gain boolean,
    type         varchar(255)
);

alter table card
    owner to postgres;

INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (7, 'Le saviez-vous ?', 'Le numérique est responsable de 4% des émissions de gaz à effet de serre dans le monde en 2022 et 2,5% de l''empreinte carbone nationale en France.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (9, 'Le saviez-vous ?', 'La phase de production des terminaux concentre 70% de l''empreinte carbone du numérique en France en 2022. La stratégie des 3R permet d''améliorer la situation: Réduire, Réutiliser et Recycler.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (11, 'Le saviez-vous ?', 'Si internet était un pays, il serait le 3ème plus gros consommateur d''électricité mondial en 2022 après la Chine (1er) et les Etats-Unis (2ème).', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (5, 'Le saviez-vous ?', e'Le poids moyen d\'une page web a été multiplié par 155 en 27 ans passant de 14 Ko en 1995 à 2 200 Ko en 2022, sans pour autant accélérer
les services rendus. Que justifie cette inflation ?', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (13, 'Le saviez-vous ?', 'Le numérique produit 1,5 fois plus de gaz à effet de serre que le transport aérien en 2021.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (15, 'Le saviez-vous ?', 'La fabrication d''un ordinateur nécessite 240kg de combustibles fossiles dont de nombreux métaux rares, 22kg de produits chimiques et 1,5 tonnes d''eau. Cette énergie grise prend la plus grosse part des dépenses du numérique.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (17, 'Le saviez-vous ?', '53 millions de tonnes de déchets d''équipements electriques et électroniques (DEEE) ont été générés dans le monde en 2019 et seuls 17% de ces déchets sont correctement recyclés. Le recyclage illégal se concentre à Agbogbloshie au Ghana où les déchets sont brulés à même le sol pour récupérer le métal.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (19, 'Le saviez-vous ?', 'En 2019, le numérique a émis autant de gaz à effet de serre que 116 millions de tours du monde en voiture.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (21, 'Le saviez-vous ?', 'Regarder une vidéo en utilisant le signal Wifi permet de consommer 23 fois moins d’énergie qu’en passant par une connexion 4G.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (23, 'Le saviez-vous ?', e'Une requête effectuée sur le moteur de recherche Google capterait autant de courant qu’une ampoule allumée pendant 1 à 2 minutes, dommage
quand on sait se connecter au site recherché via son URL directe.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (25, 'Le saviez-vous ?', e'Visionner un film en basse résolution plutôt qu’en haute définition diviserait au moins par 4 et même jusqu\'à 10 fois la consommation
d’énergie totale nécessaire. ', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (27, 'Le saviez-vous ?', e'D\'après l\'étude Exceeding valus et Sandish Group publiée en 2014, 70% des fonctionnalités demandées par les utilisateurs ne sont jamais ou
rarement utilisées.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (29, 'Le saviez-vous ?', e'Microsoti a mesuré en 2013 que l\'affichage de 20% d\'éléments en moins dans la page de résultats de son moteur Bing réduisait jusqu\'à
80% la charge de ses serveurs.', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (31, 'Le saviez-vous ?', e'En avril 2022 le nombre d\'internautes a atieint 5 milliards, soit 63% de la population mondiale. Voici quelques chiffres-clés de l\'activité d\'internet mondiale en 1 minute :
1. 5,9 millions de recherches effectuées sur Google,
2. 1,7 millions de contenus partagés sur Facebook,
3. 500h de vidéos téléchargées sur Youtube,
4. 90M$ depensées dans les cryptomonnaies 
5. 443k$ dépensés sur Amazon 
6. 66 000 photos partagées sur Instagram
7. 347 000 tweets postés sur Twitier
8. 2,4 millions de snaps envoyés sur Snapchat
9. 231 millions d\'emails envoyés
10. 16 millions de messages textes', null, null, null, null, null, null, null, 'Sensibilisation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (33, 'Ne pas hésiter à utiliser un cache applicatif local pour les données appropriées', e'Une application web peut sauvegarder et lire des données dans le local store du navigateur ou dans la base de données IndexedDB hébergée par le navigateur. 
Dans les deux cas, ce stockage local peut être utilisé en tant que cache applicatif ou pour stocker des préférences utilisateur. Il permet ainsi d\'économiser des requêtes réseau, optimiser l\'accès à ces données et donc le CPU utilisé.', 2, 'Architecte', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (35, 'Favoriser les polices standards', e'Préférer les polices standards, car elles sont déjà présentes sur l’ordinateur de l’utilisateur. On économise ainsi de la bande passante, tout en accélérant l’affichage du site.
S’il n’est vraiment pas possible d’utiliser une police standard : 
- Utiliser un faux-gras via la propriété css -webkit-text-stroke
- Ne charger que les variations de la police utilisées (ex: regular, bold, etc.)
- Optimiser la police en retirant les caractères non nécessaires', 1, 'Développeur', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (37, 'Favoriser un design simple, épuré, adapté au web', 'Privilégiez un design simple et épuré, réalisable uniquement en HTML5 et CSS3. Un site simple et adapté aux besoins des utilisateurs permetira, en plus de leur offrir une expérience fluide et agréable, d’économiser des ressources et de la bande passante.', 3, 'Product Owner', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (39, 'Utiliser des formats d''échanges binaires modernes (protobuf, avro...)', e'Les formats d\'échanges traditionnels (JSON / XML) sont au format texte et échangent des caractères ASCII. Ces formats sont dit "verbeux" et peu optimaux d\'un point de vue consommation de bande passante.
Deux alternatives permettent de réduire la bande passante:
- compresser les messages échangés - utiliser des formats de sérialisation binaires tels que Protobuf ou Avro.
Ce type de sérialisation permet d\'améliorer la performance des échanges de données entre différents systèmes et réduire le volume de données échangés.', 3, 'Architecte', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (41, 'Mettre en place un "Circuit breaker"', e'Un "circuit breaker" casse le traitement d\'une requête à travers plusieurs services dans le cas où un des services ne répond pas. Des requêtes provenant des terminaux utilisateurs peuvent solliciter des services utiles et aussi pour lesquels un mode dégradé est acceptable. Ils sont qualifiés de non critiques. En fonction d’un certain nombre de
critères d’erreur (timeout, nombre d’erreurs), le service appelant un service non critique peut désactiver cet appel et renvoyer immédiatement une réponse alternative. Ce pattern permet de ne pas solliciter inutilement un service et le réseau.', 2, 'Architecte', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (43, 'Mettre en place un outil d''analyse de code avec un plugin orienté eco-code', e'Les outils d\'analyse de code comme sonarqube commencent à proposer des règles d\'analyse du code mettant en évidence les mauvaises pratiques nuisant à la performance énergétique des applications.
C\'est notamment le cas pour les applications mobiles sur lesquelles il est important de veiller à économiser la batterie et donc d\'éviter les traitements en tache de fond ou non optimisés.', 1, 'Développeur', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (141, e'Formation au
développement green', e'Référentiel GreenIT.fr - GreenIT.fr, avec le soutien de plus de
40 contributeurs membres du collectif conception numérique responsable, a mis au point un référentiel de 115 bonnes pratiques d\'éco-conception web.', null, 'Développeur', null, 'https://github.com/cnumr/best-practices', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (45, 'Ne SELECTionner que les champs utiles', e'Lors du réquêtage d\'une base de données, il ne faut conserver dans la clause SELECT que les colonnes qui vont être utiles au traitement. (typiquement banir le SELECT *) Ainsi on limite les accès disque sur la base, le volume des données transférées sur le réseau et la mémoire nécessaire à la réception de ces données côté client.
De cette manière on évite aussi par ricochet d\'alourdir inutilement d\'éventuels objets métier ou objets de transfert de données qui seraient utilisés dans la suite du traitement applicatif.', 1, 'Développeur', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (47, 'Privilégier HTTP/2 à HTTP/1', e'Avec HTTP/2 les navigateurs utilisent le multiplexage, ils téléchargent avec une seule requête toutes les ressources nécessaires à l’affichage de la page (JavaScript, css, images…) limitant à une seule connexion TCP l’échange avec le serveur. La représentation binaire et les en-têtes HTTP compressées réduisent la bande passante.
Assurez-vous d’utiliser des serveurs supportant HTTP/2 et activez cette fonctionnalité pour qu’elle soit disponible pour les clients la supportant.', 2, 'Architecte', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (49, 'Privilégier une approche "mobile first", à défaut un chargement adaptatif', 'L’approche mobile first consiste à concevoir un site/service en ligne pour les terminaux mobiles et n’élargir sa couverture fonctionnelle pour de plus grands écrans que si l’apport fonctionnel/ergonomique est justifié. Dans ce cas, opter pour le chargement adaptatif qui consiste à sélectionner les ressources JS et CSS les plus adaptées au contexte d''utilisation. Côté serveur, utiliser les client hints, ou l''identifiant du navigateur couplé à un tableau de capacités des navigateurs. Côté client, utiliser les media queries (attributs media et link), les attributs srcset et sizes des img, les sous-éléments source des pictures, video et audio.', 3, 'Product Owner', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (51, 'Utiliser des frameworks efficients supportant l''autoscaling', e'L\'auto-scaling (ou auto-dimensionnement) permet d\'adapter le nombre de ressources (VM, ...) nécessaires à l\'exécution d\'un service. Il faut être capable de démarrer des services en cas de pic de charge mais aussi de les réduire en creux de charges. 
L\'utilisation combinée du cloud, de la conteneurisation, de l\'orchestration voire des Function As A Service (Serverless) permetient d\'optimiser les ressources. Pour être efficient, il faut choisir les images Docker les plus légères et les moins consommatrices et choisir un framework capable de démarrer rapidement et supportant le downscaling (tels que Quarkus, Spring Cloud Function...).', 3, 'Architecte', false, null, false, false, false, '25kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (53, 'Ajouter des entêtes Expires ou Cache-Control', e'Définissez avec les en-têtes Expires et Cache-Control la durée de conservation d’une ressource dans le cache du navigateur.
Cela évite qu’il les redemande au serveur, permettant d’économiser de la bande passante et des ressources serveur.', 1, 'Architecte', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (55, 'Éviter d''utiliser des images matricielles pour l''interface', 'Les images matricielles jpg, gif, png... constituent souvent la majorité de la bande passante utilisée lors du chargement d’une page web. Si l’image est constituée de formes simples, privilégiez les styles css, les glyphes et les formats vectoriels (svg). Le format vectoriel peut être 5 à 10 fois moins lourd qu’un format matriciel tout en pouvant être redimensionné à l’infini.', 1, 'Développeur', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (57, 'Éviter les temps de blocages par des traitements JavaScript trop longs', 'Un navigateur a un processus qui transforme le code en page web. Il analyse le script HTML, construit la page web et exécute les codes CSS et Javascript. Or l''exécution du code peut occuper les processeurs à plus de 90% ce qui bloque les autres traitements voire les interactions avec l''utilisateur. Cela peut mener à un renouvellement du terminal utilisateur à cause de l''obsolescence perçue. Pour éviter cela, découper vos JavaScript en petites tâches exécutées au moment requis et non pas avant. Concrètement, mesurer le Total Blocking Time (TBT), temps total occupé par des Long Tasks (Tâches longues de plus de 200ms) avec LightHouse ou Web Page Test.', 3, 'Développeur', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (59, 'Externaliser les feuilles de styles CSS et les scripts Javascript', 'Si vous incluez du code CSS ou JavaScript dans le corps du fichier HTML, alors que ce dernier est utilisé par plusieurs pages, ce code doit être transféré pour chaque page demandée par l’internaute, ce qui augmente le volume de données transmises. En revanche, si les codes CSS et JavaScript sont inclus dans leurs propres fichiers, le navigateur peut les stocker dans son système de cache local afin de ne pas les redemander.', 1, 'Développeur', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (61, 'Limitez au maximum les fonctionnalités d''envois de mails', e'L’empreinte énergétique d’un e-mail se mesure par sa bande passante et son parcours coûteux sur des routeurs, data-centers... devant être refroidis, ainsi que la dépense électrique de votre ordinateur lorsque vous lisez ou écrivez vos emails. Elle augmente avec la taille des pièces jointes et est démultipliée par le nombre de destinataires. 
Evitez d’avoir des fonctionnalités d’envoi d’e-mails, privilégiez des notifications sur le site. S’il n’y a pas d’autre choix, limitez le nombre de destinataires, préférez du texte brut, pas d’image et des pièces jointes légères et utiles ou stockées sur un serveur de partage avec un lien.', 2, 'Product Owner', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (63, 'Mettre en cache les données calculées souvent utilisées', e'Lorsque des calculs de valeurs ou de données sont souvent utilisés et qu\'ils restent inchangés, il est intéressant de les mettre en cache pour limiter le coût en ressources. 
Des systèmes de cache de type key-value store sont prévus pour stocker ces données. Généralement montés entièrement en mémoire vive, ils génèrent d’importantes économies de cycles CPU.', 3, 'Architecte', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (65, 'Optimiser les images', e'Les images matricielles doivent être réservées essentiellement aux photos et aux éléments de l’interface qui ne peuvent pas être pris en charge par des icônes, des styles CSS ou des images vectorielles svg. 
L’élément html picture permet au navigateur de charger l’image la plus optimisée par rapport à la taille de l’écran et aux formats supportés. 
Pour cela, il faut pré-générer l’image en plusieurs formats et plusieurs tailles sur le serveur. Les formats .webp et .avif peuvent être jusqu’à 50% plus légers que le format .jpeg.', 1, 'Développeur', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (67, 'Préférer la pagination au défilement infini', e'Le défilement infini permet le chargement de la page au fur et à mesure du scroll de l’utilisateur.
Cela perturbe les robots d’indexation, est potentiellement coûteux en terme de performances et cela n’est pas respectueux des pratiques d’accessibilité. De plus, cela incite à une utilisation prolongée de l’application et cela engendre une consommation accrue de ressources.
Préférez une pagination classique avec un système de filtres performant.', 3, 'Product Owner', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (143, e'Formation au
développement green', e'Référentiel GreenIT.fr - GreenIT.fr, avec le soutien de plus de
40 contributeurs membres du collectif conception numérique responsable, a mis au point un référentiel de 115 bonnes pratiques d\'éco-conception web.', null, 'Développeur', null, 'https://github.com/cnumr/best-practices', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (69, 'Préférer une PWA à une application mobile native similaire au site web', 'Si une application mobile n’utilise que des fonctionnalités natives pouvant être implémentées en javascript grâce à des API web (par exemple la géolocalisation), elle peut être remplacée par une PWA (Progressive Web App). La PWA n''étant pas liée à un système d''exploitation (OS) et souvent plus légère qu''une application mobile native, permet de réduire le risque d''obsolescence du terminal mobile et une utilisation moindre de la bande passante.', 2, 'Architecte', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (71, 'Auditer la maturité NR (Numérique Responsable) de votre projet', e'Auditer la maturité NR d\'un projet est essentiel pour plusieurs raisons.
Cela permet d\'évaluer l\'impact environnemental, assurer la conformité aux normes, renforcer la réputation de l\'entreprise, optimiser l\'utilisation des ressources, et encourager l\'innovation durable.
CGI dispose d\'une méthodologie et d\'outils spécialisés pour accélérer ce processus et vous accompagner pour garantir ainsi une transformation numérique responsable et efficiente.', 2, 'Développeur', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (73, 'Rationnaliser les logs pour les rendre plus concis, plus pertinents et plus exploitables', e'Sans réflexion préalable sur la stratégie de logs on risque d\'aboutir à des fichiers de traces très volumineux contenant beaucoup d\'informations inutiles à l\'exploitabilité de l\'application. 
Cela engendre des coûts de stockage, de transfert et d\'exploitation.
En limitant la quantité de logs et en ne ciblant que les informations pertinentes au monitoring de l\'application et des processus métier, on facilite la centralisation des logs et leur exploitation tout en diminuant les coûts associés.', 2, 'Développeur', false, null, false, false, false, '50kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (75, 'Réduire le volume de données stockées au strict nécessaire', e'Afin de limiter l\'impact environnemental du stockage des données, et optimiser les performances de recherche, il est nécessaire de réduire au maximum le volume stocké.
Pour ce faire :
- Stocker seulement des données utiles à l\'application et ne pas céder à la tentation de tout stocker "au cas où ce serait utile"
- Réfléchir au cycle de vie de la donnée : si possible, mettre en place des processus d\'archivage/de purge.
- Optimiser la gestion des gros volumes de données.
- Superviser la taille des espaces de stockage.', 2, 'Product Owner', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (77, 'N''utilisez que les portions indispensables des  librairies JavaScript et frameworks CSS', e'Il est fréquent que les dépendances externes ajoutées à un projet offrent bien plus de fonctionnalités que ce dont le projet a réellement besoin. 
Afin de diminuer la taille du bundle de l\'application, il est nécessaire de cibler les librairies et frameworks offrant une architecture modulaire permettant de n\'inclure dans l\'application que les modules qui sont réellement utilisés.
Au niveau du code cela nécessite d\'être rigoureux sur sa gestion des imports mais un bundler tel que webpack permet de visualiser les modules non utilisés.', 2, 'Architecte', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (79, 'Choisir un langage et un runtime adaptés & efficients', e'Il n\'y a pas de bon ou de mauvais langage mais chacun a ses domaines d\'utilisation privilégiés.
Pour garantir des performances élevées et être énergétiquement efficient, il faut faire le bon choix au démarrage du projet. Une étude a montré que des langages sont plus efficients (C, Rust, C++...) et d\'autres très consommateurs (Python, Ruby, Perl...) mais ce n\'est pas le seul critère à prendre en compte.
Par exemple, javascript, par son moteur d\'exécution monothread est un bon candidat pour réaliser des traitements simples et interrompus par des entrées/sorties. En revanche il sera mauvais pour des calculs longs ou massivement parallèles.', 2, 'Architecte', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (81, 'Utiliser des techniques de base de données pour limiter le nombre de requêtes', e'Des techniques permetient de limiter le nombre de requêtes faites aux bases de données et limiter la bande passante réseau et le CPU utilisés:
- Effectuer les insertions et mises à jour sous forme de batch (bulk).
- Augmenter le paramètre row fetch size, le nombre d\'enregistrement retrouvés à la fois par JDBC lors des requêtes SQL.
- Utiliser des bind variables pour diminuer le risque d\'injection SQL, améliorer la performance des requêtes de 20 à 30% avec un plan d\'exécution précalculé.
- Utiliser des requêtes SQL ensemblistes plutôt que multiplier les petites requêtes SQL.', 2, 'Développeur', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (83, 'Limiter le volume de données échangées', e'Lors d\'échange de données entre 2 modules applicatifs, quel que soit le format utilisé, il est important de ne faire transiter que les données nécessaires au traitement en optimisant leur taille.
Typiquement dans le cas d\'objets sérialisés en JSON, les objets ne doivent contenir que les propriétés utiles, le nom des propriétés doit être concis et les valeurs enumérées doivent être représentées sous forme de code.
Atiention cependant à conserver des formats humainement compréhensibles pour que la maintenance reste possible.', 1, 'Développeur', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (85, 'Préférer l''event driven au polling', e'Dans les applications client/serveur temps réel, il faut éviter que le rafraichissement des données soit à l\'initiative du client via un mécanisme  de polling à fréquence régulière.
En effet il est difficile de trouver une juste fréquence de polling ce qui induit soit un manque de réactivité soit une surcharge du serveur et du réseau.
Il est donc préférable que ce soit le serveur qui notifie l\'arrivée d\'un évènement aux clients qui s\'y sont abonné afin que ceux-ci ne lancent leur procédure de rafraichissement que lorsque cela est nécessaire. Les technologies envisageables sont les WebSockets et SSE (Server-Sent Events).', 3, 'Architecte', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (87, 'Privilégier le batch et les traitements asynchrones au stream processing', e'Le traitement de flux de données de forte volumétrie en temps réel apporte de véritables gains sur l\'immédiateté des résultats obtenus et sur les usages associés.
Cependant, contrairement aux traitements par lots en batches, les données sont traitées de façon unitaire ou par petits paquets. Il n\'est donc pas possible d\'optimiser les traitements via des approches ensemblistes et il est donc nécessaire de déployer plus de ressources pour effectuer les mêmes traitements.
Il faudra privilégier une approche par batch avec une fréquence d\'exécution adaptée au besoin.', 2, 'Product Owner', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (89, 'Proposer un traitement asynchrone lorsque c''est possible', e'Pour un traitement lourd et long, privilégiez un traitement asynchrone pour lequel l’utilisateur recevra une notification lorsqu’il est terminé (ex un lien dans un e-mail) plutôt qu’un traitement synchrone qui nécessite une attente sur serveur. Cela permet de libérer des ressources qui attendent du côté du serveur front.
Du côté du serveur back les traitements pourront être regroupés en batch plutôt que d’être fait à la volée pour chaque demande de façon synchrone. La charge du traitement pourra être optimisée et lissée permettant une meilleure mutualisation des serveurs (et donc moins de serveurs).', 3, 'Architecte', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (145, e'Formation au
développement green', e'Référentiel GreenIT.fr - GreenIT.fr, avec le soutien de plus de
40 contributeurs membres du collectif conception numérique responsable, a mis au point un référentiel de 115 bonnes pratiques d\'éco-conception web.', null, 'Développeur', null, 'https://github.com/cnumr/best-practices', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (91, 'Utiliser des serveurs virtualisés', e'La virtualisation est une technologie permetiant de créer et d’exécuter des représentations virtuelles d’un ordinateur sur une machine physique. Le logiciel se charge d\'allouer les ressources entre les différents environnements virtuels en fonction de leurs besoins.
Cela permet une économie sur le matériel par mutualisation et une utilisation optimale des ressources (RAM, CPU, disque). Cela réduit la quantité de déchets électroniques et la consommation électrique.
Une machine virtuelle peut accueillir un service de conteneurisation. Il va permettre d\'executer de manière isolé plusieurs applications sur le même système d\'exploitation.', 2, 'Architecte', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (93, 'Utiliser un CDN', e'Un Content Delivery Network permet
de mettre à disposition les dépendances les plus courantes des applications web.
Ils sont répartis géographiquement à travers le monde de façon à être proche des clients quelle que soit leur localisation.
Ainsi dans le cas d\'une application worldwide, la récupération des dépendances à travers le CDN le plus proche va permettre d\'économiser de longs transits sur le réseau.
Attention cependant car cette stratégie peut devenir contre-productive dans le cas d\'une application locale dont le serveur racine est par nature plus proche qu\'un CDN hébergé sur internet.', 2, 'Architecte', false, null, false, false, false, '75kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (95, 'Minifier les fichiers CSS, JavaScript, HTML et SVG', e'La minification d\'une application web permet d\'élaguer au maximum le code au moment du packaging en supprimant tout ce qui n\'est pas nécessaire à l\'exécution. (sauts de ligne, commentaires, nom de fonctions et de variable etc)
Ce processus permet de réduire drastiquement la taille du bundle de l\'application et donc d\'optimiser son coût (et son temps!) de transfert vers le client.
Il s\'agit d\'un gain sans effort car il suffit de configurer correctement son bundler.', 1, 'Développeur', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (97, 'Mettre en place une architecture élastique', e'La charge d\'une application n\'est pas constante au cours du temps. Il n\'est pas nécessaire d\'utiliser des infrastructures techniques aussi importantes aux heures creuses qu\'aux heures de forte demande. Les environnements de tests et développement peuvent être éteints la nuit et les jours non ouvrés. Il est possible de modifier dynamiquement la taille de l\'infrastructure en fonction de la charge, par programmation ou par provisionnement dynamique.
CGI dispose d\'un outil CO2BOT utile à cet effet. La containerisation Docker permet aussi de créer des images de vos applications qui peuvent être déployées ou arrêtées par un orchestrateur comme Kubernetes.', 3, 'Architecte', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (99, 'Adapter la qualité de service et le niveau de disponibilité', 'La qualité de service et le niveau de disponibilité doivent être déterminés avec les utilisateurs du site web ou du service en ligne. Un haut niveau de disponibilité se traduit par une redondance de toutes les installations physiques pour pallier d''éventuelles pannes. Cela augmente la consommation énergétique, et l’empreinte environnementale est dégradée.', 1, 'Architecte', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (101, 'Adopter le carbone aware computing', e'Le but du carbon aware computing est de planifier les traitements applicatifs sur des plages horaires pendant lesquelles l\'électricité est la plus décarbonée.
C\'est le cas lors des heures creuses ou lorsque les conditions météo permettent la production d\'énergie renouvelable.
Pour obtenir ces informations on peut s\'appuyer sur les APIs proposés par les distributeurs d\'électricité du pays dans lequel est hébergée l\'infrastructure du projet. 
De plus il est important d\'identifier avec le métier quels sont les traitements pouvant être décalés.', 2, 'Architecte', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (103, 'Choisir un format de données adapté', 'Le type de donnée utilisé pour manipuler et stocker une donnée doit être choisi avec soin pour réduire le gaspillage de mémoire, la consommation en cycle processeur et l''espace de stockage, tout en augmentant les performances. Le choix du type de données peut être fondé sur l’analyse d’un échantillon représentatif. Par exemple, dans le cas du stockage d''un entier, connaître l''ordre de grandeur des données permet de déterminer s''il est possible d’utiliser un TINYINT (1 octet) ou un SMALLINT (2 octets), plutôt que d''utiliser par défaut un INT (4 octets) ou un BIGINT (8 octets).', 3, 'Architecte', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (105, 'Eviter le transfert d''une grande quantité de données pour réaliser un traitement', e'Les systèmes de gestions de base données sont conçus pour répondre efficacement aux traitements de grandes quantités de données. Pour les traitements avec une logique complexe, il est déconseillé de récupérer les données "brutes" et de réaliser toutes les opérations de calcul, transformation ou agrégation côté serveur backend voire frontend.
Ces traitements doivent plutôt être réalisés au plus près de la donnée afin de limiter la bande passante, profiter des optimisations de la base données sur la manipulation des données et d\'alléger le cycle CPU.', 2, 'Architecte', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (107, 'Favoriser les pages statiques', e'Préférer des pages statiques pour les pages de présentation de contenu permet d’économiser des cycles CPU, de la bande passante, et réduit la consommation électrique.
L’utilisation de pages dynamiques requiert de charger les différentes couches logicielles pour servir le contenu demandé par l’internaute : serveur d’applications, base de données)... Un fichier statique est directement lu et renvoyé à l’internaute par le serveur HTTP ou le serveur de cache.
Des outils existent pour générer automatiquement des pages statiques à partir d\'un site dynamique.', 2, 'Architecte', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (109, 'Limiter le nombre de requêtes HTTP', e'Lors de la récupération des données nécessaires à l\'affichage d\'un écran, il est préférable de limiter le nombre de requêtes HTTP à destination des API back.
En effet chacun de ces appels engendre une sur-consomation réseau liée aux protocoles sous-jacents et à une certaine redondance des données récupérées entre les différentes requêtes (typiquement pour faire correspondre les résultats de chacune).
Il est donc préférable d\'opter pour un développement "client first" afin que l\'API retourne via un petit nombre de routes les données nécessaires à l\'écran et uniquement celles-là.', 2, 'Développeur', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (111, 'Limiter le recours à l''IA aux cas où elle apporte une réelle plus-value', e'On estime qu\'une requête à un service d\'IA est 4 à 5 fois plus consommatrice qu\'une requête standard à un moteur de recherche. (source: Qscale)
De plus les processus d\'entrainement des modèles d\'IA sont très longs et très gourmands en CPU/GPU car il sont itératifs sur des très gros volumes de données.
Il est donc important d\'utiliser l\'IA avec discernement et de la réserver aux cas d\'usage où elle apporte une vraie valeur ajoutée par rapport à un algorithme standard.', 2, 'Product Owner', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (147, e'Formation au
développement green', e'Référentiel GreenIT.fr - GreenIT.fr, avec le soutien de plus de
40 contributeurs membres du collectif conception numérique responsable, a mis au point un référentiel de 115 bonnes pratiques d\'éco-conception web.', null, 'Développeur', null, 'https://github.com/cnumr/best-practices', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (113, 'Limitez les fonctionnalités d''export Excel trop volumineux', e'L’export Excel est coûteux en bande passante, en ressources pour les requêtes en BDD et génération du fichier. La plupart du temps seule une petite quantité des données est utilisée et c’est une fonctionnalité redondante avec une page de l’application. Privilégiez l\'accès aux données sur l’application avec filtres et pagination permettant de ne récupérer que les données utiles.
N’hésitez pas à proposer des fonctionnalités d’agrégation qui perme􀀄ront d’obtenir un aperçu des données sur lesquelles se focaliser pour que l’utilisateur puisse ensuite se concentrer sur l’export d’un sous-ensemble de données.', 2, 'Product Owner', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (115, 'Mettre en place une politique d''expiration et de suppression des données', e'Les données stockées dans un SI n\'ont pas toutes vocation à être conservées indéfiniment.
Pour savoir quelles données peuvent être purgées / archivées il est nécessaire de définir pour chaque catégorie de données quel est son cycle de vie et à partir de quand il n\'est plus pertinent de les conserver.
Ceci va permettre de mettre en place des stratégies de purge et d\'archivage visant à alléger au maximum les volumes de données manipulées afin de réduire l\'infrastructure de stockage et d\'améliorer les performances d\'accès.', 2, 'Architecte', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (117, 'Optimiser le parcours utilisateur', e'Le temps passé par l\'utilisateur sur son terminal est le deuxième poste en terme d\'impact écologique. Pour limiter ce temps d\'utilisation, il est nécessaire de cibler les parcours utilisateurs les plus fréquents et d\'optimiser leur usage. Des tests utilisateurs peuvent être fait pour identifier les points de friction, ralentissant le parcours, afin d\'y remédier.
Par exemple :
- Mettre en avant les champs ou les filtres les plus utilisés.
- Acheter sans inscription sur un site de e-commerce.
- Copier/Coller son RIB plutôt que le télécharger puis le transférer.', 4, 'Product Owner', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (119, 'ORM - éviter les requêtes multiples', e'Les ORM simplifient l\'accès aux bases de données, cependant dans les cas d\'accès à des grappes d\'objets complexes, ces outils peuvent adopter des approches naïves menant à multiplier les requêtes pour récupérer les différentes entités de la grappe.
Ces accès sont beaucoup moins efficaces qu\'une requête native bénéficiant de toute la puissance de la base de données (jointures, indexes etc)
Il faut donc être vigilant aux requêtes faites par l\'ORM en activant le tracage de celles-ci lors de la phase de développement et le cas échéant revenir à des requêtes natives.', 3, 'Développeur', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (121, 'Construire son application par itération en démarrant par un MVP', e'Le MVP est la version la plus minimaliste possible d’un produit. 
C’est ce minimum acceptable qui va être testé auprès d’utilisateurs, appelés clients, avant le lancement de la version aboutie du produit. Les retours effectués permettront
d’améliorer le MVP, de l’enrichir avec de nouvelles fonctionnalités, par itération, jusqu’à devenir le produit fini. L’objectif est de récolter un maximum d’informations en produisant le minimum d’effort. 
L\'autre bénéfice d\'une telle approche agile par itération est de limiter les fonctionnalités du produit au strict minimum nécessaire et donc limiter les ressources d\'exécution.', 3, 'Product Owner', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (123, 'Utiliser le chargement paresseux', 'Ne chargez les ressources (images, vidéos, iframes...) que lorsqu''elles sont effectivement affichées à l’écran. Pour cela, vous pouvez ajouter un attribut loading=”lazy” à vos images et à vos iframes. Cette fonctionnalité étant récente, il est possible de reproduire ce comportement sur des navigateurs plus anciens grâce à de petites librairies javascript (LOZAD 1,9 Ko (gzip) - Vanilla-lazyload 3,5 Ko (gzip)).', 2, 'Développeur', false, null, false, false, false, '100kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (125, 'Assurer la compatibilité avec les plus anciens  appareils et logiciels du parc', e'Le but est de garantir la compatibilité de l’application avec les plus anciens matériels et logiciels possédés par les utilisateurs pour éviter leur remplacement prématuré.
L’application doit être utilisable sans restriction sur les configurations les plus contraignantes. Cela comprend les versions de navigateurs, les versions de système d’exploitation, les middlewares supportés, les terminaux les moins puissants…
L\'inventaire est réalisé grâce aux statistiques de fréquentations mais les utilisateurs qui ne peuvent pas du tout utiliser le site n\'apparaitront pas. Il faut donc réaliser un inventaire sur le terrain.', 4, 'Architecte', false, null, false, false, false, '200kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (127, 'Eliminer les fonctionnalités non essentielles', e'Des études montrent que 70 % des fonctionnalités demandées par les utilisateurs ne sont pas essentielles et 45 % ne sont jamais utilisées. Viser la sobriété fonctionnelle de son application permet d\'abaisser son coût de développement initial, sa dette technique et les impacts environnementaux associés.
Pour vérifier l\'utilité d\'une fonctionnalité en amont de son développement, des méthodes comme la méthode MoSCoW, des ateliers, des wireframes (maquettes fonctionnelles) ou des prototypes avec tests utilisateurs peuvent être mis en place.', 3, 'Product Owner', false, null, false, false, false, '200kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (129, 'Optimiser les requêtes aux bases de données', e'Les requêtes en base de données, notamment celles qui sont effectuées fréquemment, ont une influence sur la consommation des ressources. 
Pour les optimiser on peut entre autres : analyser le plan d’exécution des requêtes pour les optimiser, limiter le nombre de données remontées (pagination, LIMIT), ne récupérer que les champs nécessaires, ajouter des index sur les clés pour les requêtes coûteuses en lecture, conserver en cache les résultats qui changent peu ou encore avoir un modèle de données dénormalisé (limiter les jointures).', 3, 'Développeur', false, null, false, false, false, '200kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (131, 'Quantifier précisément le besoin', e'Le besoin doit être quantifié précisément afin d\'éviter au maximum la surqualité. Il peut s\'agir d\'un taux de compression pour les images, un temps de réponse maximum pour une requête HTTP ou le nombre d’items affichés dans une liste. Si une information n’est pas précisée, c’est le niveau de qualité ou la quantité minimale qui doit être proposé.
De plus, les valeurs par défaut, rarement modifiées par l\'utilisateur, doivent être choisies pour répondre au besoin avec un impact minimal.
Par exemple, mettre par défaut une résolution de vidéo acceptable (480p) plutôt que maximale.', 2, 'Product Owner', false, null, false, false, false, '200kg');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (133, 'Expert architecte logiciel écoresponsable', null, null, 'Architecte', null, null, null, null, null, 'Expert');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (135, 'Expert développeur artisan écoresponsable', null, null, 'Développeur', null, null, null, null, null, 'Expert');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (137, 'Expert fonctionnel écoresponsable', null, null, 'Product Owner', null, null, null, null, null, 'Expert');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (139, e'Formation au
développement green', e'Référentiel GreenIT.fr - GreenIT.fr, avec le soutien de plus de
40 contributeurs membres du collectif conception numérique responsable, a mis au point un référentiel de 115 bonnes pratiques d\'éco-conception web.', null, 'Développeur', null, 'https://github.com/cnumr/best-practices', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (149, e'Formation au
développement green', e'Référentiel GreenIT.fr - GreenIT.fr, avec le soutien de plus de
40 contributeurs membres du collectif conception numérique responsable, a mis au point un référentiel de 115 bonnes pratiques d\'éco-conception web.', null, 'Développeur', null, 'https://github.com/cnumr/best-practices', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (151, 'Formation à l''écoconception tech', 'Guide designers éthiques - Ce guide présente les principales bonnes pratiques de design pour réaliser des services numériques à l’empreinte environnementale réduite. Il aborde les questions d’écoconception, l’accessibilité, la diversité et l''économie de l''attention.', null, 'Architecte', null, 'https://eco-conception.designersethiques.org/guide/fr/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (153, 'Formation à l''écoconception tech', 'Guide designers éthiques - Ce guide présente les principales bonnes pratiques de design pour réaliser des services numériques à l’empreinte environnementale réduite. Il aborde les questions d’écoconception, l’accessibilité, la diversité et l''économie de l''attention.', null, 'Architecte', null, 'https://eco-conception.designersethiques.org/guide/fr/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (155, 'Formation à l''écoconception tech', 'Guide designers éthiques - Ce guide présente les principales bonnes pratiques de design pour réaliser des services numériques à l’empreinte environnementale réduite. Il aborde les questions d’écoconception, l’accessibilité, la diversité et l''économie de l''attention.', null, 'Architecte', null, 'https://eco-conception.designersethiques.org/guide/fr/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (157, 'Formation à l''écoconception tech', 'Guide designers éthiques - Ce guide présente les principales bonnes pratiques de design pour réaliser des services numériques à l’empreinte environnementale réduite. Il aborde les questions d’écoconception, l’accessibilité, la diversité et l''économie de l''attention.', null, 'Architecte', null, 'https://eco-conception.designersethiques.org/guide/fr/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (159, 'Formation à l''écoconception tech', 'Guide designers éthiques - Ce guide présente les principales bonnes pratiques de design pour réaliser des services numériques à l’empreinte environnementale réduite. Il aborde les questions d’écoconception, l’accessibilité, la diversité et l''économie de l''attention.', null, 'Architecte', null, 'https://eco-conception.designersethiques.org/guide/fr/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (161, 'Formation à l''écoconception tech', 'Guide designers éthiques - Ce guide présente les principales bonnes pratiques de design pour réaliser des services numériques à l’empreinte environnementale réduite. Il aborde les questions d’écoconception, l’accessibilité, la diversité et l''économie de l''attention.', null, 'Architecte', null, 'https://eco-conception.designersethiques.org/guide/fr/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (163, 'Formation à la frugalité fonctionnelle', 'Référentiel GR491 - Le GR491 est le Guide de Référence de Conception Responsable de Services Numériques créé par l''Institut français du Numérique Responsable.', null, 'Product Owner', null, 'https://gr491.isit-europe.org/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (165, 'Formation à la frugalité fonctionnelle', 'Référentiel GR491 - Le GR491 est le Guide de Référence de Conception Responsable de Services Numériques créé par l''Institut français du Numérique Responsable.', null, 'Product Owner', null, 'https://gr491.isit-europe.org/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (167, 'Formation à la frugalité fonctionnelle', 'Référentiel GR491 - Le GR491 est le Guide de Référence de Conception Responsable de Services Numériques créé par l''Institut français du Numérique Responsable.', null, 'Product Owner', null, 'https://gr491.isit-europe.org/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (169, 'Formation à la frugalité fonctionnelle', 'Référentiel GR491 - Le GR491 est le Guide de Référence de Conception Responsable de Services Numériques créé par l''Institut français du Numérique Responsable.', null, 'Product Owner', null, 'https://gr491.isit-europe.org/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (171, 'Formation à la frugalité fonctionnelle', 'Référentiel GR491 - Le GR491 est le Guide de Référence de Conception Responsable de Services Numériques créé par l''Institut français du Numérique Responsable.', null, 'Product Owner', null, 'https://gr491.isit-europe.org/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (173, 'Formation à la frugalité fonctionnelle', 'Référentiel GR491 - Le GR491 est le Guide de Référence de Conception Responsable de Services Numériques créé par l''Institut français du Numérique Responsable.', null, 'Product Owner', null, 'https://gr491.isit-europe.org/', null, null, null, 'Formation');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (175, 'Requêtes SQL multiples au sein d''une boucle', e'Les requêtes SQL à l’intérieur de boucles posent de gros problèmes de performance et saturent la bande passante réseau en raison des allers-retour réseau nécessaires. C\'est d’autant plus vrai si le serveur SQL n’est pas sur la machine locale. 
En effet, ces serveurs sont optimisés pour traiter plusieurs sélections, insertions ou modifications dans une seule requête ensembliste ou une seule transaction.
Mal utilisées, ces requêtes consomment inutilement des cycles CPU, de la mémoire vive et surtout de la bande passante.', 2, 'Développeur', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (177, 'Redimensionner des images côté navigateur', e'Ne pas redimensionner les images en utilisant les attributs HEIGHT et WIDTH du code HTML. Cette approche impose en effet de transférer ces images dans leur taille originale, cela gaspille de la bande passante et du CPU.
Par exemple, une image de 350 × 300 pixels encodée en PNG 24 pèse 41 Ko. Redimensionnée dans le code HTML, la même image affichée en vignette à 70 × 60 pixels pèse toujours 41 Ko au lieu de 3 Ko.
La meilleure solution consiste à générer les images à la taille à laquelle elles sont affichées via un éditeur d\'image ou un script automatisé lors de l\'upload initial.', 1, 'Développeur', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (179, 'Reconnexion systématique à la base de données', e'Quelque soit le système de base de données, l’ouverture d’une connexion est un processus coûteux en ressources pour le client et le serveur (Allocation de mémoire écritures et lectures disque pour les buffers, aller-retours réseaux pour le protocole de connexion, CPU induit). 
La bonne pratique qui est usuellement utilisée est la mise en place d’un pool de connexions. Il permet d’optimiser la gestion des connexions ainsi que les performances. Dans les cas où il n\'y a pas de pool de connexion, réutiliser une connexion et ne pas ouvrir ou fermer une nouvelle connexion à chaque requête.', 1, 'Développeur', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (181, 'Ne pas utiliser les caches du navigateur', e'Les navigateurs proposent plusieurs caches : le back forward cache et le cache HTTP.
Le premier permet de stocker des pages entières et le second permet de stocker des réponses HTTP.
Les deux ont pour but d\'éviter de recharger complètement les pages en cas de réaffichage.
Cependant pour que ces mécanismes fonctionnent de façon optimale il est important de configurer correctement les headers HTTP du serveur et de respecter quelques règles sur la taille et le code javascript des pages pour que les pages affichées soient toujours à jour après utilisation du cache.', 2, 'Développeur', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (183, 'Auto-complétion systématique', e'L\'autocomplétion permet de suggérer à l\'utilisateur des résultats à sa recherche pendant la saisie. Pour l\'implémenter, il faut envoyer une requête au serveur à chaque caractère saisi. Cela occasionne beaucoup de requêtes et donc de ressources dépensées.
Une alternative est la saisie assistée qui consiste à guider l\'utilisateur par un ensemble d\'informations et d\'indices (ajout de placeholder, format attendu, interface réactive...).
Les interactions liées à la saisie assistée sont gérées localement et cela réduit les échanges avec le serveur.', 2, 'Product Owner', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (185, 'Sons et vidéos chargées automatiquement', e'L\'activation automatique des vidéos et des sons au chargement des pages web implique une utilisation de ressources sur chaque tiers (terminal, réseau, datacenter). La lecture automatique n\'est souvent pas nécessaire.
Ces lectures doivent donc se faire à la demande de l\'utilisateur en ne mettant pas en place l\'attribut autoplay dans les balises <video> ou <audio>.
Il convient aussi de forcer le navigateur à ne rien précharger en définissant la valeur de l\'attribut preload des balises <video> ou <audio> à none.', 1, 'Product Owner', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (187, 'Plusieurs fonctionnalités non utilisées', e'Embarquer des fonctionnalités non utilisées dans un logiciel allourdit le poids de l\'application et cela a un impact sur l\'exécution (RAM supplémentaire et espace disque utilisé pour stocker les données associées en mémoire).
De plus, il y a un surcoût de maintenance.
Il est donc nécessaire de mesurer l\'utilisation des fonctionnalités et supprimer ou désactiver celles qui ne sont pas utilisées.', 2, 'Product Owner', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (189, 'Choisir une fréquence de rafraîchissement trop élevée', e'Il est important de définir avec les utilisateurs la fréquence de rafraîchissement dont ils ont réellement besoin pour utiliser le logiciel.
En effet dans le cas de données rarement mises à jour, la valeur affichée initialement pourra être considérée comme suffisante.
A l\'inverse dans le cas de données très fréquemment mises à jour une bufferisation toutes les x secondes est nécessaire pour éviter l\'effet "sapin de noël".', 1, 'Product Owner', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (191, 'Choix de technologie inadaptée', e'Il faut sélectionner la technologie la plus économe en fonction de ses besoins et de ses contraintes métier.
Un site statique sera choisi pour du contenu qui change très peu. Il pourra être mis en cache et ne sollicitera pas de base de données ou de serveur d\'application.
Pour un site plus dynamique, le sur mesure permet plus de souplesse dans l\'optimisation technique et d\'embarquer le strict nécessaire. 
Pour un site qui délivre un service métier, l\'utilisation d\'une Single Page Application peut être recommandé.
Cela permet de limiter les aller retours avec le serveur et rendre l\'expérience utilisateur plus fluide et performante.', 3, 'Architecte', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (193, 'KPI calculés à la volée', e'Un KPI est un indicateur clé de performance utilisé en Business Intelligence dans un tableau de bord pour donner aux décideurs une bonne visibilité sur leur activité.
Pour le calculer, il est nécessaire de manipuler et agréger une forte volumétrie de données.
Plus un tableau de bord est consulté, plus le nombre de requêtes de calcul souvent identiques sera important.
Il est donc important de précalculer ces indicateurs et d\'en stocker le résultat pour éviter d\'exécuter plusieurs fois les mêmes requêtes SQL coûteuses. Par contre, il conviendra de bien gérer le cycle de vie de ces données agrégées pour économiser l\'espace disque utilisé.', 2, 'Architecte', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (195, 'Hébergement sous forme de serveurs physiques', e'Héberger son application avec un serveur physique dédié n\'est pas la solution la plus économe puisqu\'elle peut conduire à une sous-utilisation des serveurs qui passent une majorité du temps à attendre les requêtes des utilisateurs.
Il convient donc de densifier l\'hébergement applicatif. Cela peut être réalisé via l\'utilisation de Virtual Machines co-hébergées sur un hyperviseur ou même mieux via l\'utilisation des technologies de conteneurisation telles que Docker.
De surcroit, la conteneurisation permet de définir l\'infrastructure avec du code et de gommer les différences entre les différents environnements PROD, INTEG,DEV...', 3, 'Architecte', false, null, false, false, false, 'Mauvaise pratique');
INSERT INTO public.card (id, title, description, difficulty, actor, cpu_gain, link, memory_gain, network_gain, storage_gain, type) VALUES (197, 'N''utiliser qu''un seul type de stockage de données', e'Sans stratégie d\'archivage les volumes de données croissent indéfiniment et cela sur des serveurs dimensionnés pour la performance ce qui est très couteux.
En réalité, passé un certain âge les données sont souvent plus ou peu utilisées.
Il est donc intéressant de mettre en place un stockage "froid" de ces données pour libérer de l\'espace sur les stockages "chauds" comme les bases de données de production.
Un stockage froid permet toujours de consulter les données mais avec des contraintes de performance moins fortes ce qui est plus économe.', 4, 'Architecte', false, null, false, false, false, 'Mauvaise pratique');
